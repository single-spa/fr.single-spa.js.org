<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>single-spa Blog</title>
        <link>https://fr.single-spa.js.org/blog</link>
        <description>single-spa Blog</description>
        <lastBuildDate>Mon, 24 Feb 2020 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[single-spa 5]]></title>
            <link>https://fr.single-spa.js.org/blog/2020/02/24/single-spa-5</link>
            <guid>/2020/02/24/single-spa-5</guid>
            <pubDate>Mon, 24 Feb 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Today we released single-spa@5.0.0.]]></description>
            <content:encoded><![CDATA[<p>Today we released <a href="mailto:single-spa@5.0.0">single-spa@5.0.0</a>.</p><p>Here are the highlights:</p><ul><li>Performance focus: 35% decrease in library size.</li><li>A CLI for single-spa: <a href="/docs/create-single-spa">create-single-spa</a></li><li>New tutorial videos: <a href="https://www.youtube.com/playlist?list=PLLUD8RtHvsAOhtHnyGx57EYXoaNsxGrTU">Youtube playlist</a> / <a href="https://space.bilibili.com/495254378/video">Bilibili space</a></li><li>New framework-specific example repositories - <a href="https://github.com/react-microfrontends">React example</a>, <a href="https://github.com/vue-microfrontends">Vue example</a>, <a href="https://github.com/polyglot-microfrontends">Multiple frameworks example</a>, <a href="/docs/examples">Full list</a></li><li>Massively improved documentation, including <a href="/docs/microfrontends-concept">Concept: Microfrontends</a> and <a href="/docs/recommended-setup">The Recommended Setup</a>.</li></ul><p><a href="https://github.com/single-spa/single-spa/releases/tag/v5.0.0">Release notes here</a></p><h2>Migration from 4 to 5</h2><p>For every user we&#x27;re aware of, <strong>you do not need to change anything in your code in order to upgrade to single-spa@5</strong>. The breaking changes listed in the release notes are the removal of features that were originally used by Canopy Tax, but were never documented.</p><p>If installing from npm, you can simply <code>npm install --save single-spa@5.0.0</code> or <code>yarn add single-spa@5.0.0</code>.</p><p>Alternatively, single-spa is available on <a href="https://cdnjs.com/libraries/single-spa">cdnjs</a>, <a href="https://www.jsdelivr.com/package/npm/single-spa">jsdelivr</a>, and <a href="https://unpkg.com/browse/single-spa/">unpkg</a>.</p><p>The single-spa core team is committed to treating our users well, which includes not introducing massive breaking changes. The core single-spa API has not seen massive breaking changes <a href="https://github.com/single-spa/single-spa/releases/tag/v3.0.0">since single-spa@3 in August 2016</a>. We have added features and improved things, but single-spa is a stable technology. We are committed to maintaining it, documenting it, and adjusting it as technologies like in-browser modules become more and more popular and viable.</p><h2>Performance improvements</h2><p>The ESM version of single-spa@4 was 23.8kb (7.2kb gzipped). That was improved in single-spa@5 to 15.5kb (5.1kb gzipped). We did this by optimizing our build process and removing unused features.</p><h2>single-spa CLI</h2><p>Since single-spa&#x27;s inception, bundler configuration has been a huge source of user pain. We have heard this pain and implemented <a href="/docs/create-single-spa">create-single-spa</a>, which creates (and sometimes can update) repositories that are ready to be used as single-spa microfrontends. For Angular and Vue, the official CLIs are used with a few extra plugins automatically installed. For React, a default webpack config with decent eslint / prettier defaults is set up.</p><p>Additionally, we have added a lot of documentation for webpack in <a href="/docs/recommended-setup#build-tools-webpack--rollup">The Recommended Setup</a>.</p><h2>Tutorial videos</h2><p>We understand that single-spa is more than just a library - it is an architecture. The single-spa library itself is the core, but the surrounding ecosystem of concepts and libraries are equally important to successfully migrating to single-spa and having it work for you. As such, we have created a Youtube playlist, currently consisting of seven videos, to help you get started.</p><p><a href="https://www.youtube.com/playlist?list=PLLUD8RtHvsAOhtHnyGx57EYXoaNsxGrTU">Youtube playlist</a> / <a href="https://space.bilibili.com/495254378/video">Bilibili space</a></p><p>The videos currently cover the following topics:</p><ul><li>What are Microfrontends?</li><li>In-browser vs build-time JavaScript modules</li><li>Import Maps</li><li>Local Development with single-spa and import maps</li><li>Deploying Microfrontends / Continuous Integration (CI)</li><li>SystemJS intro</li><li>Lazy Loading</li><li>Bundlers, webpack, and rollup.</li></ul><h2>New example repositories</h2><p>What started out as Canopy Tax&#x27;s special sauce for independently deployed frontend microservices is now fully accessible to the public with our <a href="/docs/examples">new set of example repos</a>. We have a React example, a Vue example, and a polyglot (multiple framework) example. We hope to add an Angular example, after we achieve support for Angular 9. These example repositories are actively watched and maintained by the single-spa core team, and reflect our current opinions on the best, production-viable way to do microfrontends.</p><p>Furthermore, we have deployed each of the examples to our new domains:</p><ul><li><a href="https://react.microfrontends.app">https://react.microfrontends.app</a></li><li><a href="https://polyglot.microfrontends.app">https://polyglot.microfrontends.app</a></li><li><a href="https://vue.microfrontends.app">https://vue.microfrontends.app</a></li></ul><h2>Documentation overhaul</h2><p>We removed several dated documentation pages, and added several that were very much lacking. Here are a few pages that give you the most bang for your buck:</p><ul><li><a href="/docs/microfrontends-concept">Concept: Microfrontend</a></li><li><a href="/docs/recommended-setup">The Recommended Setup</a></li><li><a href="/docs/create-single-spa">create-single-spa CLI</a></li></ul><h2>Development builds and error codes</h2><p>Taking inspiration from the <a href="https://reactjs.org/docs/optimizing-performance.html#use-the-production-build">react development and production builds</a>, we now publish to NPM both development and production builds in the following formats: UMD, ESM, and System.register.</p><p>You can see the <a href="https://unpkg.com/browse/single-spa@5.0.0/lib/">published build files here</a>. The <code>.dev.js</code> files provide full debugging information in the browser console, whereas the <code>.min.js</code> files give you a numeric error code and a link to a documentation page that explains the error. We hope that these error codes and documentation for them will improve discoverability of relevant documentation when you&#x27;re setting up single-spa.</p><p>An example of these new documentation pages for error codes is <a href="/error/?code=35&amp;arg=application&amp;arg=app1&amp;arg=%7B%7D">found here</a>.</p><h2>Governance</h2><p>Some of you may have noticed that we recently moved all github repos from <a href="https://github.com/CanopyTax">https://github.com/CanopyTax</a> to <a href="https://github.com/single-spa">https://github.com/single-spa</a>. Canopy Tax was the company where single-spa was first authored, but as a core team we asked to move ownership and governance of the projects to an organization fully managed by the open source community. In agreement with Canopy, we made that change.</p><p>This change does not mean anything drastic for single-spa. Its license was and is MIT, and we have no plans to do anything with the project besides make it better.</p><h2>Where next?</h2><p>We are actively <a href="https://github.com/single-spa/zh-hans.single-spa.js.org">translating the single-spa documentation to Chinese</a>, and hope to add other languages soon. We will add full <a href="https://github.com/single-spa/single-spa-angular/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+is%3Aopen+angular+9">Angular 9 support</a> soon, and hope to add <a href="https://github.com/single-spa/single-spa/issues/103">server rendering</a> in an upcoming release.</p><p>Please <a href="/docs/contributing-overview">contribute to our code</a> and <a href="/docs/ecosystem">ecosystem</a>, <a href="https://join.slack.com/t/single-spa/shared_invite/zt-yxfqpl2u-PNx3uZtS3pgAXbOBWsdwOA">join our single-spa slack channel</a>, <a href="https://twitter.com/Single_spa">follow our official Twitter account</a>, and contribute to <a href="https://opencollective.com/single-spa">our open collective</a>. The <a href="/contributors">single-spa core team</a> all have full-time jobs and maintain this project on a volunteer basis.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[single-spa Inspector and 4.1]]></title>
            <link>https://fr.single-spa.js.org/blog/2019/02/20/single-spa-inspector</link>
            <guid>/2019/02/20/single-spa-inspector</guid>
            <pubDate>Wed, 20 Feb 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Background]]></description>
            <content:encoded><![CDATA[<h2>Background</h2><p>For a long time, Canopy has had the benefit of using a tool called <a href="https://github.com/single-spa/sofe-inspector">sofe inspector</a> (note: this is an out-of-date version of it) to list, override, and interact with single-spa applications. There has always been a desire to <a href="https://github.com/single-spa/single-spa/issues/151">figure out how to share this tool so others can benefit as well</a>.</p><p>With that in mind, I&#x27;m proud to announce an initial release for <strong><a href="https://github.com/single-spa/single-spa-inspector">single-spa Inspector</a></strong>! single-spa Inspector is a Firefox and Chrome extension, much like React/Vue devtools, that allows you see and interact with your single-spa applications and configuration.</p><h2>Current Inspector Features</h2><ul><li>List registered applications</li><li>Show application status</li><li>Force an app to mount or unmount</li><li>Hover over an app name to have an &quot;inspect element&quot;-like view of your apps (Overlays)</li></ul><p>(Note: Overlays require a small update to your code, but should hopefully be simple! See <a href="https://github.com/single-spa/single-spa-inspector#configuring-app-overlays">how to configure app overlays</a>)</p><p><strong>The single-spa Inspector will only work with single-spa versions 4.1 and higher</strong>, since we had to expose and add some functionality to the single-spa library itself in order to implement these features.</p><h2>single-spa 4.1</h2><p>single-spa 4.1 was released, which includes a couple of key updates:</p><ol><li>Support for single-spa Inspector</li><li>ESM bundle output</li><li>Simpmlified test configuration for developers/contributors to single-spa</li></ol><p>For most people, ESM (EcmaScript Module) support shouldn&#x27;t affect how you use single-spa, but for those looking to play around with modules or other advanced Javascript things, it&#x27;s a welcome addition.</p><p>We also changed our test suite to purely use Jest instead of Saucelabs, and hopefully false positive &quot;failing&quot; tests on pull requests will be a thing of the past.</p><h2>Help Wanted!</h2><p>If you would like to suggest a new feature for single-spa Inspector, report a bug, improve our (admittedly horrible and hopefully temporary) UI/UX, or add features, please see the <a href="https://github.com/single-spa/single-spa-inspector">github repo</a> and hack away!</p><p>We also hope to update some of our example repos to the lastest single-spa so that anyone with the extension installed can test out the features and see how to implement overlays. But this process will go faster if someone wants to help out. :)</p><p>Thank you!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[single-spa parcels, explained]]></title>
            <link>https://fr.single-spa.js.org/blog/2018/06/19/single-spa-parcels-explained</link>
            <guid>/2018/06/19/single-spa-parcels-explained</guid>
            <pubDate>Tue, 19 Jun 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[Ever since single-spa@1.0.0, the single-spa team has been dedicated to bringing microservices to the frontend. We have made it possible for AngularJS, React, Angular, Vue, and other frameworks to coexist side by side in the same page.]]></description>
            <content:encoded><![CDATA[<p>Ever since <a href="mailto:single-spa@1.0.0">single-spa@1.0.0</a>, the single-spa team has been dedicated to bringing microservices to the frontend. We have made it possible for AngularJS, React, Angular, Vue, and other frameworks to coexist side by side in the same page.</p><p>And with the release of <a href="https://github.com/single-spa/single-spa/releases/tag/v4.0.0">version 4</a>, I’m pleased to announce that <a href="https://github.com/single-spa/single-spa">single-spa</a> is expanding that effort so that <strong><em>individual components</em></strong> written with different frameworks can interoperate. It is new terrain for the single-spa community, which previously had focused on getting large applications to interoperate with each other, instead of the individual components.</p><h2>Another way to do framework agnostic components?</h2><p>For those familiar with <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">web components</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements">custom elements</a>, you may be wondering why a JavaScript library would try to do what browsers are starting natively to do.</p><p>And as one of the contributors to the custom elements polyfill, let me be the first one to say that we did not make this decision lightly.</p><p>If you’re interested in diving into the details, check out <a href="https://medium.com/canopy-tax/one-companys-relationship-with-custom-elements-d360baf3b253">One Company’s Relationship With Custom Elements</a>, which explains some of the difficulties we’ve been through with web components and custom elements.</p><p>TLDR: React and some other frameworks don’t interop with custom elements very well. Additionally dealing with inner HTML, attributes vs properties, and customized builtins can be a pain.</p><h2>Okay but you haven’t told me what a single-spa parcel is</h2><p>A parcel is single-spa’s way of building a component in one framework and using it in another.</p><p>To implement a parcel, just create a JavaScript object that has 3–4 functions on it. We call this JavaScript object a <em>parcel config</em> and there are three required functions to implement: bootstrap, mount, and unmount. A fourth function, update, is optional.</p><p>Each of the functions will be called by single-spa at the right time, but the parcel config will control what happens. In other words, single-spa controls the “when,” but the parcel config controls the “what” and the “how.”</p><p>Once you’ve implemented the parcel config, simply call singleSpa.mountRootParcel(parcelConfig, parcelProps) to mount it. This is the key to what makes parcels framework agnostic — regardless of whether the parcel config is implemented with React, Angular, Vue, or anything else, to use the parcel you always just call mountRootParcel().</p><h2>A few more specifics</h2><p>We’ve glossed over a few things that I want to touch on real quick:</p><ul><li><p><strong>How do you implement the lifecycle functions on the parcel config?</strong></p><pre><code>        Use a helper library for your framework of choice. [single-spa-react](https://github.com/single-spa/single-spa-react), [single-spa-angular](https://github.com/single-spa/single-spa-angular) (for angular@2+), [single-spa-angularjs](https://github.com/single-spa/single-spa-angularjs), [single-spa-vue](https://github.com/single-spa/single-spa-vue), and [others](https://github.com/single-spa/single-spa/blob/master/docs/single-spa-ecosystem.md) will implement the entire parcel config for you.
</code></pre></li><li><p><strong>What are the props you pass to mountRootParcel()?</strong></p><pre><code>        The props passed as the second argument to singleSpa.mountRootParcel(parcelConfig, parcelProps) are an object with one required prop and as many custom props as you’d like. The required prop is domElement, which tells the parcel where to mount. And the custom props get passed through to the parcel config lifecycle functions.
</code></pre></li><li><p><strong>How do you re-render and unmount a parcel?</strong></p><pre><code>        The singleSpa.mountRootParcel() function returns a parcel object that lets you re-render and unmount the parcel whenever you’d like to.

        &lt;iframe src=&quot;https://medium.com/media/b2d981b380b937009f7ce84e1cc2d753&quot; frameBorder=&quot;0&quot; /&gt;
</code></pre></li></ul><h2>Syntactic sugar makes this easier</h2><p>Calling all of those functions manually might get annoying. So let’s make it easier. Here’s an example of some syntactic sugar for React. Similar features will be added soon for Angular, Vue, and other frameworks.</p><iframe src="https://medium.com/media/9b5904d3423359cb2eef410f9ee35648" frameBorder="0"></iframe><h2>How hard is it to try this out?</h2><p>You can get started with parcels immediately, without using the rest of single-spa. To do so, either npm install or script tag single-spa, then call mountRootParcel with your first parcel config.</p><p>You can also check out <a href="https://codepen.io/joeldenning/pen/qKVoQg?editors=0010#0">this codepen example</a> to start out.</p><p>And if you are already a user of <a href="https://github.com/single-spa/single-spa/blob/master/docs/applications.md">single-spa applications</a>, parcels mean that your applications can mount and unmount shared functionality whenever you want them to. Since parcels don’t have <a href="https://github.com/single-spa/single-spa/blob/master/docs/configuration#activity-function">activity functions</a>, you don’t have to set up routes for them.</p><h2>Let us know what you think!</h2><p>We’d love to get your feedback on parcels. What do you think of this new way of framework interop? Is the implementation easy to understand? Are parcels useful for you or do they not quite fit into what you’re trying to accomplish?How hard was it for you to try out?</p><p>Check out the <a href="https://github.com/single-spa/single-spa/blob/master/docs/parcels.md">official docs</a> for more examples, explanations, and <a href="https://github.com/single-spa/single-spa/blob/master/docs/parcels-api.md">api documentation</a>.</p><p>And let us know your thoughts in the <a href="https://join.slack.com/t/single-spa/shared_invite/zt-yxfqpl2u-PNx3uZtS3pgAXbOBWsdwOA">single-spa Slack channel</a>, a <a href="https://github.com/single-spa/single-spa/issues">Github issue</a>, or <a href="https://twitter.com/Single_spa">on Twitter</a>!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A step-by-step guide to single-spa]]></title>
            <link>https://fr.single-spa.js.org/blog/2016/12/16/a-step-by-step-guide-to-single-spa</link>
            <guid>/2016/12/16/a-step-by-step-guide-to-single-spa</guid>
            <pubDate>Fri, 16 Dec 2016 00:00:00 GMT</pubDate>
            <description><![CDATA[Running Angular 1, React, Angular 2, and Vue.js side by side sounds pretty cool. And it seems appealing to have multiple applications coexisting on the same page, each lazily loaded.]]></description>
            <content:encoded><![CDATA[<p>Running Angular 1, React, Angular 2, and Vue.js side by side sounds pretty cool. And it seems appealing to have multiple applications coexisting on the same page, each lazily loaded.</p><p>But using <a href="/">single-spa</a> for the first time can be tricky because you’ll come across terms like “application lifecycles”, “root application”, “loading function”, “child application”, and “activity function.”</p><p>This blog post will take you through setting things up and what choices you have when using single-spa. It’s based on what I’ve seen at <a href="https://medium.com/canopy-tax">Canopy Tax</a> where we went from an Angular 1 monolith to an Angular 1, React, and Svelte polyglot.</p><p>If you’d like to jump straight to a fully working, self contained code example, check out this <a href="https://github.com/joeldenning/simple-single-spa-webpack-example">webpack single-spa starter project</a>.</p><h2>Step One: choose a module loader.</h2><p>Your module loader / bundler is the library you’ll use to lazy load code. I recommend either <a href="https://webpack.js.org/">Webpack</a> or <a href="https://jspm.io/">JSPM</a>, if you’re starting from scratch.</p><p>If you go with Webpack, try to use Webpack 2 if you can, since it has <a href="https://webpack.js.org/guides/migrating/#code-splitting-with-es2015">support for promise-based lazy loading</a>. This will make things easier for you later on, since single-spa requires that your <a href="https://github.com/single-spa/single-spa/blob/master/docs/root-application.md#loading-function">loading functions</a> return promises. If you can’t use Webpack 2, getting single-spa to lazy load your code with Webpack 1 will require some boilerplate code.</p><p>JSPM/SystemJS has worse documentation than Webpack, but is a great solution for module loading if you can get past that. I recommend using <a href="mailto:jspm@0.17">jspm@0.17</a> — it’s still in beta but has been worked on for over a year and at Canopy we find it stable enough to use in production.</p><p>If you’re struggling to decide between the two, then ask yourself the following: Do I want multiple completely separate bundles? If you don’t, I recommend Webpack because it has better docs, a larger community, and fewer gotchas. Otherwise, I’d go with JSPM, since Webpack has no plans to support dynamic runtime loading <a href="https://twitter.com/TheLarkInn/status/789968589419745280">(See tweet below from Mr. Larkin, himself)</a>.</p><h2>Step Two: create a brand new HTML file</h2><p>The next step is to create what single-spa calls your <a href="https://github.com/single-spa/single-spa/blob/master/docs/root-application.md">“root application.”</a> Really your root application is just the stuff that initializes single-spa, and it starts with an HTML file.</p><p>Even if you’ve got an existing project that already has it’s own HTML file, I recommend starting fresh with a new HTML file. That way, there is a clear distinction between what is in your root application (shared between all apps) and what is in a child application (not shared with everything).</p><p>You’ll want to keep your root application as small as possible, since it’s sort of the master controller of everything and could become a bottleneck. You don’t want to be constantly changing both the root application and the child applications.</p><p>So for now, just have a <code>&lt;script&gt;</code> to a single JavaScript file (root-application.js), which will be explained in Step Three.</p><p>Since Webpack is probably the more common use case, my code examples from here on will assume that you’re using Webpack 2. The equivalent Webpack 1 or JSPM code has all the same concepts and only some minor code differences.</p><pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot; /&gt;
    &lt;title&gt;A single-spa application&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;cool-app&quot;&gt;&lt;/div&gt;
    &lt;script src=&quot;root-application.js&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><h2>Step Three: register an “application”</h2><p>Now it’s time to finish up your root application by writing your “root-application.js” file. The primary purpose of root-application.js is to call <a href="https://github.com/single-spa/single-spa/blob/master/docs/root-application.md#declaring-child-applications">singleSpa.registerApplication(..)</a> for each of the applications that will be managed by single-spa.</p><p>If you’re into analogies, you can think of single-spa as the operating system for your single page application, managing which “processes” (or “child applications”) are running at any given time. At any moment, some of the child applications will be active on the DOM and others will not. As the user navigates throughout the app, some applications will be unmounting from the DOM and others will be mounting to the DOM.</p><p>Another way to look at it is that single-spa is a master router on top of your other routers.</p><p>To do this, first <code>npm install single-spa</code> and then call the <a href="https://github.com/single-spa/single-spa/blob/master/docs/root-application.md#declaring-child-applications">registerApplication</a> function:</p><pre><code class="language-js">import {registerApplication, start} from &#x27;single-spa&#x27;;

// Register your first application with single-spa. More apps will be registered as you create them
registerApplication(&#x27;cool-app&#x27;, loadCoolApp, isCoolAppActive);

// Tell single-spa that you&#x27;re ready for it to mount your application to the DOM
start();

// This is a &quot;loading function&quot;
function loadCoolApp() {
  return import(&#x27;./cool-app/cool.app.js&#x27;);
}

// This is an &quot;activity function&quot;
function isCoolAppActive() {
  return window.location.hash.startsWith(&#x27;#/cool&#x27;);
}
</code></pre><p>Because single-spa is <em>so very</em> cool, we’ve created an app called “cool-app” that will be lazy loaded and mounted to the DOM whenever the url hash starts with <code>#/cool</code>.</p><p>The <code>loadCoolApp</code> function is what single-spa calls a loading function. Inside of it, the <code>import</code> introduces a code splitting point — Webpack will create separate code chunks that will be lazy loaded by single-spa.</p><p>For your specific project, you probably won’t have a hash prefix of “cool”, but I recommend establishing some kind of convention that makes it easy to determine which apps are active. This will simplify the maintenance of your activity functions, as you add more and more child applications.</p><p>If you’re going to start out with just one child application, then it might make sense to implement the activity function as <code>() =&gt; true</code>. You can worry about getting fancier once you have more than one application.</p><p>The last thing is to call <code>start()</code>. This is something you <strong>must do for things to work.</strong> The purpose is to give control over timing and performance. But until that is a concern, <code>start</code> is just one of those things you do, and then maybe <a href="https://github.com/single-spa/single-spa/blob/master/docs/single-spa-api.md#start">read about it</a> later if you ever need to.</p><h2>Step Four: create “.app.js” file</h2><p>When you open up your index.html file in the browser, you’ll now see….. a blank screen! We’re really close, but there’s one crucial step left: building your app.js file.</p><p>After that, you’ll have everything working for your first single-spa application.</p><p>An app.js file is a configuration file that you create for each child application. It is the code that is lazy loaded when your activity function returns true.</p><p>There are three things that you need to implement in the app.js file:</p><ol><li><a href="" target="_blank" rel="noopener noreferrer">A bootstrap lifecycle</a></li><li><a href="" target="_blank" rel="noopener noreferrer">A mount lifecycle</a></li><li><a href="" target="_blank" rel="noopener noreferrer">An unmount lifecycle</a></li></ol><p>A “lifecycle” is a function or array of functions that will be called by single-spa; you export these from the app.js file. Each function must return a Promise so that single-spa knows when it is completed.</p><p>Here is a simple example:</p><pre><code class="language-js">// single-spa will import this file and call the exported lifecyle functions

let user;

export function bootstrap() {
  return fetch(&#x27;/api/users/0&#x27;)
    .then(response =&gt; response.json())
    .then(json =&gt; (user = json));
}

export function mount() {
  /* This is normally where you would have your framework-specific code like
   * ReactDOM.render or angular.bootstrap(). The fact that you can put *anything*
   * into this function is what makes single-spa so powerful -- any framework
   * can implement a &quot;mount&quot; and &quot;unmount&quot; to become a single-spa application.
   */
  return Promise.resolve().then(() =&gt; {
    document.getElementById(&#x27;user-app&#x27;).innerHTML = `
        &lt;div&gt;
          Hello ${user.name}!
        &lt;div&gt;
      `;
  });
}

export function unmount() {
  /* Real world use cases would be something like ReactDOM.unmountComponentAtNode()
   * or vue.$destroy()
   */
  return Promise.resolve().then(() =&gt; {
    document.getElementById(&#x27;user-app&#x27;).innerHTML = &#x27;&#x27;;
  });
}
</code></pre><p>At this point, you might be seeing the <code>document.getElementById</code> and <code>innerHTML =</code> and worry that you’ve been duped — maybe single-spa is really just a poor excuse for a ui component framework.</p><p>And really, don’t we already have a lot of different ways to write UI components?</p><h3>Getting all of those frameworks to work together.</h3><p><em>Using multiple frameworks</em> is where single-spa really shines. It is not a ui framework itself, but a framework for using other frameworks.</p><p>Each child application can be written in any framework, so long as it implements application lifecycle functions. Then the mini-apps cooperate to form the entire single page application.</p><p>So going back to our previous example, we could choose to write our “cool.app.js” as an Angular 1 app, and choose something else for future apps:</p><pre><code class="language-js">import singleSpaAngularJS from &#x27;single-spa-angularjs&#x27;;
import angular from &#x27;angular&#x27;;
import &#x27;./app.module.js&#x27;;
import &#x27;./routes.js&#x27;;

const domElementGetter = () =&gt; document.getElementById(&#x27;cool-app&#x27;);

const angularLifecycles = singleSpaAngularJS({
  angular,
  domElementGetter,
  mainAngularModule: &#x27;single-spa-app&#x27;,
  uiRouter: true,
  preserveGlobal: true,
});

export const bootstrap = [
  aboutToBootstrap,
  angularLifecycles.bootstrap,
  doneBootstrapping,
];

export const mount = [angularLifecycles.mount];

export const unmount = [angularLifecycles.unmount];

function aboutToBootstrap() {
  console.log(&#x27;about to bootstrapping&#x27;);
  return Promise.resolve();
}

function doneBootstrap() {
  console.log(&#x27;finished bootstrapping&#x27;);
  return Promise.resolve();
}
</code></pre><p>In this example, we use a helper library called <a href="https://github.com/single-spa/single-spa-angularjs">single-spa-angularjs</a> which abstracts away the specifics of initializing Angular 1 apps. This blogpost doesn’t show you the <code>app.module.js</code> or <code>routes.js</code> files, but you can see an example implementation <a href="https://github.com/single-spa/single-spa-examples/tree/master/src/angularJS">here</a>.</p><p>The pattern is to call <code>singleSpaAngularJS</code> at the very beginning, which returns <code>bootstrap</code>, <code>mount</code>, and <code>unmount</code> lifecycle functions for you.</p><p>You might notice that this time the lifecycles are exported as arrays of functions instead of just functions — you can choose whichever works best for you.</p><p>The advantage of exporting an array of functions is that you can add in your own custom behavior (like <code>aboutToBootstrap</code> and <code>doneBootstrap</code>) that will run before or after the Angular 1 lifecycles. When you export an array, each item in the array must be a function that returns a promise. Single-spa will wait for each promise to resolve, in order, before calling the next function in the array.</p><p>To learn more about single-spa helper libraries, check out these github projects:</p><ul><li><a href="https://github.com/single-spa/single-spa-angularjs" target="_blank" rel="noopener noreferrer">single-spa-angularjs</a></li><li><a href="https://github.com/single-spa/single-spa-angular" target="_blank" rel="noopener noreferrer">single-spa-angular</a></li><li><a href="https://github.com/single-spa/single-spa-react" target="_blank" rel="noopener noreferrer">single-spa-react</a></li><li><a href="https://github.com/single-spa/single-spa-vue" target="_blank" rel="noopener noreferrer">single-spa-vue</a></li><li><a href="https://github.com/single-spa/single-spa-svelte" target="_blank" rel="noopener noreferrer">single-spa-svelte</a></li><li><a href="https://github.com/single-spa/single-spa-preact" target="_blank" rel="noopener noreferrer">single-spa-preact</a></li></ul><p>You can also see a fully working example of an angular app coexisting with other apps at the <a href="https://github.com/single-spa/single-spa-examples">single-spa-examples</a> repo or the <a href="http://single-spa.surge.sh/">live demo</a>.</p><h2>Step Five: test it out!</h2><p>Refresh your page and you should now have a functioning single-spa application!</p><p>Try navigating to a url that your child app is active for (<code>#/cool</code>) and then navigating away from it. When you do so, the page will not refresh but you should see your application mount itself to the DOM and then unmount.</p><p>If you run into problems, try to narrow down whether the problem is in the root application or in the child application. Is your root application being executed? Are the declareChildApplication calls being made? Have you called <code>start()</code>? Is there a network request to download the code for your child application? Is your child application&#x27;s <code>bootstrap</code> lifecycle being called? What about <code>mount</code>?</p><img src="https://cdn-images-1.medium.com/max/1600/1*WMFuo-hz-Q31UVbTHAx4lw.png" alt="cdn-images-1"/><p>It may be helpful to add a navigation menu, so you can verify everything mounts and unmounts to the DOM correctly. If you want to level up your single-spa skills even more, make the navigation menu an entire child application whose activity function is <code>() =&gt; true</code>. An example that does just that is found <a href="https://github.com/single-spa/single-spa-examples/blob/master/src/single-spa-examples.js#L3">here</a> and <a href="https://github.com/single-spa/single-spa-examples/blob/master/src/navbar/navbar.app.js">here</a>.</p><p>While you are verifying that everything is working, keep in mind that each application goes through five phases:</p><img src="https://cdn-images-1.medium.com/max/1600/1*utKlcxBkDXfQAQR52B0hAA.png" alt="an applications&#x27;s lifecycle"/><p>Conclusion</p><p>As you get your feet wet, you’ll probably run into some (hopefully small) hiccups setting things up. When this tutorial is not enough, there are other resources on <a href="https://github.com/single-spa/single-spa">Github</a> and here in the <a href="docs/building-applications.html">docs</a>.</p><p>Single-spa is still a relatively new thing, and we’d love to hear your feedback and questions. We welcome contributions from everyone.</p><p>If you’re excited about the possibilities, feel free to contact me on <a href="https://twitter.com/Joelbdenning">twitter (@joelbdenning)</a>. And if you are not excited, then still feel free to contact me, but only after you leave some nasty comments :)</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A Case for SOA in the Browser]]></title>
            <link>https://fr.single-spa.js.org/blog/2016/02/26/a-case-for-soa-in-the-browser</link>
            <guid>/2016/02/26/a-case-for-soa-in-the-browser</guid>
            <pubDate>Fri, 26 Feb 2016 00:00:00 GMT</pubDate>
            <description><![CDATA[So you are a web-developer. You write a lot of JavaScript. You have a large single-page application (SPA) with features to add and bugs to maintain. Over time the application grows in size and complexity. It becomes more difficult to modify one portion of the SPA without breaking another portion.]]></description>
            <content:encoded><![CDATA[<p>So you are a web-developer. You write a lot of JavaScript. You have a large single-page application (SPA) with features to add and bugs to maintain. Over time the application grows in size and complexity. It becomes more difficult to modify one portion of the SPA without breaking another portion.</p><p>The company is growing and you are looking for ways to scale the team and code-base. You add unit tests. You add a linter. You add continuous integration. You modularize the code with ES2015 modules, webpack, and npm. Eventually you even introduce new, independent SPAs with each SPA being owned and deployed by independent squads. Congratulations, you have successfully introduced service-oriented architecture on the front-end, or have you?</p><h2>What is Service-oriented Architecture?</h2><p>The fundamental concept behind service-oriented architecture is a service. A service is an isolated piece of code which can only be interacted with through its API. Unlike a shared library, a service itself can be deployed independently of its consumers. Think of a back-end API. The API is the service and the browser is the consumer. The API is deployed independently of the front-end application. There is also only one deployed version of the API available at a URL.</p><p>Contrast a service to a shared library. A shared library is a piece of code that is bundled and deployed with your code. For example, libraries such as Express, Lodash, and React are all shared libraries included in your application’s distributable. Upgrading a version of a shared library requires a new deployment of that distributable.</p><p>Service-oriented architecture is an approach to building software where the application is composed of many independent and isolated services. Those services are independently deployable, generally non-versioned, and auto discoverable.</p><h2>Why Service-oriented Architecture on the Front-end?</h2><p>The benefits of SOA can be illustrated with this real life example from Canopy. At Canopy we have multiple single page applications. The first application is external to the customers and the second is internal, yet both applications share common functionality. That functionality includes among other things, authentication and error logging.</p><img src="https://cdn-images-1.medium.com/max/1600/1*itLASVdD-5a3fm56hfltYQ.png" alt="cdn-images-1"/><p style="color:gray;font-size:15px;font-style:italic">Shared libraries between two separate applications. <strong>App 1</strong> depends upon shared libs <strong>a</strong>, <strong>b</strong>, and <strong>c</strong>. <strong>App 2</strong> depends upon only shared libs <strong>a</strong> and <strong>b</strong>.</p><p>Overall the design looks good. The code is modularized and shared. The complexities arrive when we start to upgrade the code to different versions. For example, after a short period of time, <strong>App 2</strong> (being internal only) is upgraded to a new beta version of the shared lib <strong>b</strong>. Because the shared <strong>a</strong> also depends upon <strong>b</strong> (and we don’t want multiple versions of <strong>b</strong> bundled) we also create a new version of <strong>a</strong>. This one change causes a rebuild and deploy of three separate pieces of code: <strong>App 2</strong> and shared libs <strong>a</strong> and <strong>b</strong>. Our dependency structure is no longer quite so simple.</p><img src="https://cdn-images-1.medium.com/max/1600/1*T5YHqkoZApSvC32jVS0osw.png" alt="cdn-images-2"/><p style="color:gray;font-size:15px;font-style:italic">In reality, a duplicate instance of lib <strong>a</strong> and <strong>b</strong> exist in both apps. Each app does not point to the same instance of the shared libraries, even when they are the same version. This is more noticeable when the shared libraries have separate versions.</p><p>Now imagine a bug in both versions of shared lib <strong>b</strong>. In order to fix the problem, you will have to republish both versions of <strong>a</strong> and <strong>b</strong> as well as <strong>c</strong>. Also <strong>App 1</strong> and <strong>App 2</strong> will have to be re-deployed. That is five new versions to publish and two apps to redeploy, all to fix one bug. All downstream dependencies have to be redeployed when a single library is changed. This is deploy dependency hell.</p><p>Service oriented architecture avoids these problems in a couple ways. Instead of bundling common dependencies, common code is shared through independent services. Services are not bundled, but rather loaded at run time. This also means that front-end services are not versioned (just like a back-end API). Both <strong>App 1</strong> and <strong>App 2</strong> load the exact same code for a front-end service.</p><h2>Introducing sofe</h2><p>Built upon the new ECMAScript module specification, sofe is a JavaScript library that enables independently deployable JavaScript services to be retrieved at run-time in the browser. Because the new module specification isn’t available within today’s browsers, sofe relies upon <a href="https://github.com/systemjs/systemjs">System.js</a> to load services at run-time.</p><p>You can load a sofe service either with static or asynchronous imports.</p><pre><code class="language-js">// Static imports
import auth from &#x27;auth-service!sofe&#x27;;
const user = auth.getLoggedInUser();
// Asynchronous imports
System.import(&#x27;auth-service!sofe&#x27;).then(auth =&gt; auth.getLoggedInUser());
</code></pre><p>The real power behind sofe is that services are resolved at run-time, making them unversioned. If <strong>auth-service</strong> is redeployed, it is immediately made available to all upstream dependencies. The above scenario becomes much easier to resolve because there is only one version of each shared library as services. This is powerful because it allows you to deploy once, update everywhere. Also because the code is loaded at run-time, we can also enable developer tools to override what service is loaded into your application. Or in other words, you can test code on production without actually deploying to production.</p><img src="https://cdn-images-1.medium.com/max/1600/1*o7IS8yKgYKSDc2w7VpyZFw.png" alt="cdn-images-2"/><p style="color:gray;font-size:15px;font-style:italic">The common dependencies are now services that are independent from the application code. Because services are unversioned, the dependency structure is again flat. Each service can individually be deployed and be available to every upstream dependency.</p><p>Obviously not all front-end code should be a service. Services have their own challenges. Specifically your code has to stay backwards compatible. But code can’t always be backwards compatible. Sometimes there needs to be breaking changes. The same problem exists for back-end services. A back-end API has to stay backwards compatible. Breaking changes on the back-end are generally solved by either creating an entirely new (versioned) API or implementing feature toggles within the API itself. The same solution applies to sofe services. An entirely new sofe service can be deployed or feature toggles can exist inside the front-end service. However it is solved, the key point is that services exist outside your application within their own distributable.</p><p>Another potential problem for sofe services is performance. Because they are loaded at run-time, performance can become a concern if you synchronously load too many services during bootstrap. Performance degradation can be mitigated by asynchronously loading larger services after the application bootstraps. Despite these challenges, there are many benefits to services on the front-end. The most exciting thing about sofe is there is now an option for services in the browser. You can decide what should and shouldn’t be a service.</p><p>Getting started with sofe requires only System.js. But to help you get started we have built sofe to work with a variety of technologies, including webpack, Babel, jspm, and the Chrome Developer Tools. Sofe is also actively used in production at Canopy Tax. We would love feedback on sofe and a number of open source projects that have been built around it. As you approach your next front-end project or look to improve your existing app, consider how it might benefit from service oriented architecture.</p><p>Read more about how to get started with sofe <a href="https://github.com/CanopyTax/sofe">here</a>.</p>]]></content:encoded>
        </item>
    </channel>
</rss>