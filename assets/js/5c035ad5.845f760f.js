"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9060],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5846:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],s={id:"ecosystem",title:"The single-spa ecosystem",sidebar_label:"Overview"},p=void 0,l={unversionedId:"ecosystem",id:"version-4.x/ecosystem",title:"The single-spa ecosystem",description:"The single-spa ecosystem is quickly growing to support as many frameworks and build tools as possible.",source:"@site/versioned_docs/version-4.x/ecosystem.md",sourceDirName:".",slug:"/ecosystem",permalink:"/docs/4.x/ecosystem",editUrl:"https://github.com/single-spa/fr.single-spa.js.org/blob/master/website/versioned_docs/version-4.x/ecosystem.md",tags:[],version:"4.x",frontMatter:{id:"ecosystem",title:"The single-spa ecosystem",sidebar_label:"Overview"},sidebar:"version-4.x/docs",previous:{title:"Parcels API",permalink:"/docs/4.x/parcels-api"},next:{title:"React",permalink:"/docs/4.x/ecosystem-react"}},c=[{value:"Help for frameworks",id:"help-for-frameworks",children:[],level:2},{value:"Webpack 2+",id:"webpack-2",children:[],level:2},{value:"SystemJS",id:"systemjs",children:[],level:2},{value:"Webpack 1",id:"webpack-1",children:[],level:2}],m={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The single-spa ecosystem is quickly growing to support as many frameworks and build tools as possible."),(0,i.kt)("h2",{id:"help-for-frameworks"},"Help for frameworks"),(0,i.kt)("p",null,"There is a growing number of projects that help you bootstrap, mount,\nand unmount your applications that are written with popular frameworks. Feel free\nto contribute to this list with your own project:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-react"},"single-spa-react")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-vue"},"single-spa-vue")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-angular"},"single-spa-angular")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-angularjs"},"single-spa-angularjs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-cycle"},"single-spa-cycle")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-ember"},"single-spa-ember")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-inferno"},"single-spa-inferno")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-preact"},"single-spa-preact")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-svelte"},"single-spa-svelte")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-riot"},"single-spa-riot")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/4.x/ecosystem-backbone"},"single-spa-backbone"))),(0,i.kt)("h2",{id:"webpack-2"},"Webpack 2+"),(0,i.kt)("p",null,"With webpack 2+, we can take advantage of its support for ",(0,i.kt)("a",{parentName:"p",href:"https://webpack.js.org/guides/code-splitting/"},"code splitting")," with ",(0,i.kt)("a",{parentName:"p",href:"https://webpack.js.org/api/module-methods/#import"},"import()"),"\nin order to easily lazy-load registered applications when they are needed. When registering\nregistered applications from inside of your single spa config, try the following for your\n",(0,i.kt)("a",{parentName:"p",href:"configuration#loading-function"},"loading functions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {registerApplication} from 'single-spa';\n\nregisterApplication('app-name', () => import('./my-app.js'), activeWhen);\n\nfunction activeWhen() {\n    return window.location.pathname.indexOf('/my-app') === 0;\n}\n")),(0,i.kt)("h2",{id:"systemjs"},"SystemJS"),(0,i.kt)("p",null,"Since SystemJS is a Promise-based ",(0,i.kt)("a",{parentName:"p",href:"https://whatwg.github.io/loader"},"loader"),", the way to\nlazy load your registered applications is straightforward:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {registerApplication} from 'single-spa';\n\n// Import the registered application with a SystemJS.import call\nregisterApplication('app-name-1', () => SystemJS.import('./my-app.js'), activeWhen);\n\n// Alternatively, use the more out-of-date System.import (instead of SystemJS.import)\nregisterApplication('app-name-2', () => System.import('./my-other-app.js'), activeWhen);\n\nfunction activeWhen() {\n    return window.location.pathname.indexOf('/my-app') === 0;\n}\n")),(0,i.kt)("h2",{id:"webpack-1"},"Webpack 1"),(0,i.kt)("p",null,"With webpack 1, there is no support for Promise-based code splitting. Instead, we have to either wrap\na require.ensure in a Promise, or just give up on lazy loading completely."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {registerApplication} from 'single-spa';\nimport app1 from './app1'; // Not lazy loading with code splitting :(\n\n// Giving up on lazy loading and code splitting :(\nregisterApplication('app-1', () => Promise.resolve(app1), activeWhen);\n\n// Still doing code splitting! But verbose :(\nregisterApplication('app-2', app2InPromise, activeWhen);\n\n/* Unfortunately, this logic cannot be abstracted into a generic\n * function that handles wrapping require.ensure in a promise for\n * any dynamically imported module. This is because webpack needs to\n * be able to statically analyze the code and find all of the require.ensure\n * calls at build-time, so you can't pass variables into require.ensure.\n */\nfunction app2InPromise() {\n    return new Promise((resolve, reject) => {\n        require.ensure(['./app-2.js'], require => {\n            try {\n                resolve(require('./app-2.js'));\n            } catch(err) {\n                reject(err);\n            }\n        });\n    });\n}\n\nfunction activeWhen() {\n    return window.location.pathname.indexOf('/my-app') === 0;\n}\n")))}u.isMDXComponent=!0}}]);