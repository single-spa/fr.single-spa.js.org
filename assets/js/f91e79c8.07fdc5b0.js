"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1919],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(h,l(l({ref:t},s),{},{components:n})):a.createElement(h,l({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4802:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var a=n(3117),o=n(102),r=(n(7294),n(3905)),l=["components"],i={id:"parcels-overview",title:"Parcels",sidebar_label:"Overview"},c=void 0,p={unversionedId:"parcels-overview",id:"version-5.x/parcels-overview",title:"Parcels",description:"Parcels are an advanced feature of single-spa. We recommend that you use applications as the primary type of microfrontend in your architecture. See this explanation for more details",source:"@site/versioned_docs/version-5.x/parcels-overview.md",sourceDirName:".",slug:"/parcels-overview",permalink:"/docs/parcels-overview",editUrl:"https://github.com/single-spa/fr.single-spa.js.org/blob/master/website/versioned_docs/version-5.x/parcels-overview.md",tags:[],version:"5.x",frontMatter:{id:"parcels-overview",title:"Parcels",sidebar_label:"Overview"},sidebar:"version-5.x/docs",previous:{title:"Migrating existing code",permalink:"/docs/migrating-existing-spas"},next:{title:"Unit testing",permalink:"/docs/testing/units"}},s=[{value:"Quick Example",id:"quick-example",children:[],level:2},{value:"Parcel configuration",id:"parcel-configuration",children:[],level:2},{value:"Parcel Lifecycles",id:"parcel-lifecycles",children:[{value:"Bootstrap",id:"bootstrap",children:[],level:3},{value:"Mount",id:"mount",children:[],level:3},{value:"Unmount",id:"unmount",children:[],level:3},{value:"Update (optional)",id:"update-optional",children:[],level:3}],level:2},{value:"Example use cases",id:"example-use-cases",children:[{value:"Modals",id:"modals",children:[],level:3}],level:2},{value:"<code>mountRootParcel</code> vs <code>mountParcel</code>",id:"mountrootparcel-vs-mountparcel",children:[{value:"Which should I use?",id:"which-should-i-use",children:[],level:3},{value:"How do I get the <code>mountParcel</code> API?",id:"how-do-i-get-the-mountparcel-api",children:[],level:3}],level:2}],u={toc:s};function m(e){var t=e.components,n=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Parcels are an advanced feature of single-spa. We recommend that you use applications as the primary type of microfrontend in your architecture. See ",(0,r.kt)("a",{parentName:"em",href:"/docs/module-types"},"this explanation")," for more details")),(0,r.kt)("p",null,"A single-spa parcel is a framework agnostic component. It is a chunk of functionality meant to be mounted manually by an application, without having to worry about which framework was used to implement the parcel or application. Parcels use similar methodology as registered applications but are mounted by a manual function call rather than the activity function.\nA parcel can be as large as an application or as small as a component and written in\nany language as long as it exports the correct lifecycle events. In a single-spa world, your SPA contains\nmany registered applications and potentially many parcels. Typically we recommend you mount a parcel within\nthe context of an application because the parcel will be unmounted with the application."),(0,r.kt)("p",null,"If you are only using one framework, it is recommended to prefer framework components (i.e., React, Vue, and Angular components) over single-spa parcels. This is because framework components interop easier with each other than when there is an intermediate layer of single-spa parcels. You may import components between registered applications via ",(0,r.kt)("inlineCode",{parentName:"p"},"import")," statements. You should only create a single-spa parcel if you need it to work with multiple frameworks. (",(0,r.kt)("a",{parentName:"p",href:"/docs/recommended-setup#in-browser-versus-build-time-modules"},"More details"),")"),(0,r.kt)("h2",{id:"quick-example"},"Quick Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// The parcel implementation\nconst parcelConfig = {\n  // optional\n  bootstrap(props) {\n    // one time initialization\n    return Promise.resolve();\n  },\n  // required\n  mount(props) {\n    // use a framework to create dom nodes and mount the parcel\n    return Promise.resolve();\n  },\n  // required\n  unmount(props) {\n    // use a framework to unmount dom nodes and perform other cleanup\n    return Promise.resolve();\n  },\n  // optional\n  update(props) {\n    // use a framework to update dom nodes\n    return Promise.resolve();\n  },\n};\n\n// How to mount the parcel\nconst domElement = document.getElementById('place-in-dom-to-mount-parcel');\nconst parcelProps = { domElement, customProp1: 'foo' };\nconst parcel = singleSpa.mountRootParcel(parcelConfig, parcelProps);\n\n// The parcel is being mounted. We can wait for it to finish with the mountPromise.\nparcel.mountPromise\n  .then(() => {\n    console.log('finished mounting parcel!');\n    // If we want to re-render the parcel, we can call the update lifecycle method, which returns a promise\n    parcelProps.customProp1 = 'bar';\n    return parcel.update(parcelProps);\n  })\n  .then(() => {\n    // Call the unmount lifecycle when we need the parcel to unmount. This function also returns a promise\n    return parcel.unmount();\n  });\n")),(0,r.kt)("h2",{id:"parcel-configuration"},"Parcel configuration"),(0,r.kt)("p",null,"A parcel is just an object with 3 or 4 functions on it. When mounting a parcel, you can provide either the object itself or a loading function that asynchronously downloads the parcel object.\nEach function on a parcel object is a lifecycle method, which is a function that returns a promise. Parcels have two required lifecycle methods (mount and unmount) and two optional lifecycles method (bootstrap and update).\nWhen implementing a parcel, it's strongly recommended that you use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/ecosystem/#help-for-frameworks"},"lifecycle helper methods"),".\nAn example of a parcel written in React would look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="myParcel.js"',title:'"myParcel.js"'},"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport singleSpaReact from 'single-spa-react';\nimport MyParcelComponent from './my-parcel-component.component.js';\nexport const MyParcel = singleSpaReact({\n  React,\n  ReactDOM,\n  rootComponent: MyParcelComponent,\n});\n\n// in this case singleSpaReact is taking our inputs and generating an object with the required lifecycles.\n")),(0,r.kt)("p",null,"Then to use the parcel you just created all you need to do is use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Parcel")," component provided in ",(0,r.kt)("a",{parentName:"p",href:"/docs/ecosystem-react/#parcels"},"single-spa-react"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="mycomponent.js"',title:'"mycomponent.js"'},"import Parcel from 'single-spa-react/parcel'\nimport { MyParcel } from './myparcel.js'\n\nexport class myComponent extends React.Component {\n  render () {\n    return (\n      <Parcel\n        config={MyParcel}\n        { /* optional props */ }\n        { /* and any extra props you want here */ }\n      />\n    )\n  }\n}\n")),(0,r.kt)("p",null,"Note that in some cases the optional props are required ",(0,r.kt)("a",{parentName:"p",href:"/docs/ecosystem-react/#examples"},"(see additional examples)"),"."),(0,r.kt)("h2",{id:"parcel-lifecycles"},"Parcel Lifecycles"),(0,r.kt)("p",null,"Start with ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/#registered-application-lifecycle"},"applications")," to learn more about the functionality of single-spa's lifecycle methods."),(0,r.kt)("h3",{id:"bootstrap"},"Bootstrap"),(0,r.kt)("p",null,"This lifecycle function will be called once, right before the parcel is\nmounted for the first time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function bootstrap(props) {\n  return Promise.resolve().then(() => {\n    // This is where you do one-time initialization\n    console.log('bootstrapped!');\n  });\n}\n")),(0,r.kt)("h3",{id:"mount"},"Mount"),(0,r.kt)("p",null,"If the parcel is not mounted this lifecycle function is called when ever ",(0,r.kt)("inlineCode",{parentName:"p"},"mountParcel")," is called. When\ncalled, this function should create DOM elements, DOM event listeners, etc. to render content to the user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function mount(props) {\n  return Promise.resolve().then(() => {\n    // This is where you tell a framework (e.g., React) to render some ui to the dom\n    console.log('mounted!');\n  });\n}\n")),(0,r.kt)("h3",{id:"unmount"},"Unmount"),(0,r.kt)("p",null,"This lifecycle function will be called whenever the parcel is mounted and one of the following cases is true:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unmount()")," is called"),(0,r.kt)("li",{parentName:"ul"},"The parent parcel or application is unmounted")),(0,r.kt)("p",null,"When called, this function should clean up all DOM elements, DOM event listeners, leaked memory, globals,\nobservable subscriptions, etc. that were created at any point when the parcel was mounted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function unmount(props) {\n  return Promise.resolve().then(() => {\n    // This is where you tell a framework (e.g., React) to unrender some ui from the dom\n    console.log('unmounted!');\n  });\n}\n")),(0,r.kt)("h3",{id:"update-optional"},"Update (optional)"),(0,r.kt)("p",null,"The update lifecycle function will be called whenever the user of the parcel calls ",(0,r.kt)("inlineCode",{parentName:"p"},"parcel.update()"),".\nSince this lifecycle is optional, the user of a parcel needs to check whether the parcel has implemented the update lifecycle before attempting to make the call."),(0,r.kt)("h2",{id:"example-use-cases"},"Example use cases"),(0,r.kt)("h3",{id:"modals"},"Modals"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"App1")," handles everything related to contacts (highly cohesive) but somewhere in ",(0,r.kt)("inlineCode",{parentName:"p"},"App2")," we need to create a contact.\nWe could do any number of things to share the functionality between application 1 and 2:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If both are written in the same framework we could export/import components."),(0,r.kt)("li",{parentName:"ul"},"We could reimplement creating a contact (loss of cohesion)"),(0,r.kt)("li",{parentName:"ul"},"We could use single-spa parcels.")),(0,r.kt)("p",null,"Exporting a parcel from ",(0,r.kt)("inlineCode",{parentName:"p"},"App1")," that wraps the createContact modal component gives us the ability to share components and behavior across disparate frameworks, without losing application cohesion.\nApp1 can export a modal as a single-spa parcel and App2 can import the parcel and use it easily. One major advantage is that in the below example\nthe parcel/modal from App1 that is being used by App2 will also be unmounted, without unmounting/mounting of App1."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// App1\nexport const AddContactParcel = {\n  bootstrap: bootstrapFn,\n  mount: mountFn,\n  unmount: unmountFn,\n}\n\n// App2\n// get the parcel configuration in this case I'm using systemJS and react\n...\ncomponentDidMount() {\n  SystemJS.import('App1').then(App1 => {\n    const domElement = document.body\n    App2MountProps.mountParcel(App1.AddContactParcel, {domElement})\n  })\n}\n...\n")),(0,r.kt)("h2",{id:"mountrootparcel-vs-mountparcel"},(0,r.kt)("inlineCode",{parentName:"h2"},"mountRootParcel")," vs ",(0,r.kt)("inlineCode",{parentName:"h2"},"mountParcel")),(0,r.kt)("p",null,"Single spa exposes two APIs for working with parcels. These API's are differentiated primarily by the context in which the parcel is created and how to access the API's"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"mountRootParcel"),(0,r.kt)("th",{parentName:"tr",align:null},"mountParcel"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"context"),(0,r.kt)("td",{parentName:"tr",align:null},"singleSpa"),(0,r.kt)("td",{parentName:"tr",align:null},"application")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unmount condition"),(0,r.kt)("td",{parentName:"tr",align:null},"manual only"),(0,r.kt)("td",{parentName:"tr",align:null},"manual + application unmount")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"api location"),(0,r.kt)("td",{parentName:"tr",align:null},"singleSpa named export"),(0,r.kt)("td",{parentName:"tr",align:null},"provided in lifecycle prop")))),(0,r.kt)("h3",{id:"which-should-i-use"},"Which should I use?"),(0,r.kt)("p",null,"In general we suggest using the application-aware ",(0,r.kt)("inlineCode",{parentName:"p"},"mountParcel")," API. ",(0,r.kt)("inlineCode",{parentName:"p"},"mountParcel")," allows you to treat the parcel just like a component inside your application without considering what framework it was written in and being forced to remember to call unmount."),(0,r.kt)("h3",{id:"how-do-i-get-the-mountparcel-api"},"How do I get the ",(0,r.kt)("inlineCode",{parentName:"h3"},"mountParcel")," API?"),(0,r.kt)("p",null,"In order to keep the function contextually bound to an application it is provided to the application as a ",(0,r.kt)("a",{parentName:"p",href:"/docs/building-applications/#lifecyle-props"},"lifecycle prop"),". You will need to store and manage that function yourself in your application."),(0,r.kt)("p",null,"Example of storing the application specific ",(0,r.kt)("inlineCode",{parentName:"p"},"mountParcel")," API:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// App1\nlet mountParcel\nexport const bootstrap = [\n  (props) => {\n    mountParcel = props.mountParcel\n    return Promise.resolve()\n  },\n  // more bootstrap lifecycles if necessary\n]\n...\n")),(0,r.kt)("p",null,"note: some libraries (such as react) support a framework specific context that makes it easy to store/manage. In those cases we've written some helper methods to abstract away the need to manage and store the ",(0,r.kt)("inlineCode",{parentName:"p"},"mountParcel")," method."))}m.isMDXComponent=!0}}]);